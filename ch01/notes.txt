Nowadays, focusing on API methods before building a whole application is one
of the most popular and effective microservices design strategies. This approach, called an API-first
microservices development, focuses first on the clientâ€™s needs and then later identifies what API service
methods we need to implement for these client requirements.

A good practice is to start all
URLs with the same top-level base path, such as /ch01, and then differ when reaching their respective
subdirectories.
@app.get("/ch01/index")
@app.get("/ch01/login")
@app.post("/ch01/login/signup")
@app.put("/ch01/account/profile/update/{username}")
@app.patch("/ch01/account/profile/update/names/{username}")
@app.delete("/ch01/discussion/posts/remove/{username}")


Clients can pass their request data to FastAPI endpoint URLs through path parameters, query parameters,
or headers to pursue service transactions.


Multiple path parameters are acceptable if the leftmost variables are more likely to be filled with values
than the rightmost variables. In other words, the importance of the leftmost path variables will make
the process more relevant and correct than those on the right. This standard is applied to ensure that
the endpoint URL will not look like other URLs, which might cause some conflicts and confusion.


Because of confusion, the built-in data validation of FastAPI will show
us a JSON-formatted error message that says, {"detail":[{"loc":["query","id"],"ms
g":"field required","type":"value_error.missing"}]}. To fix this problem, all
fixed paths should be declared first before the dynamic endpoint URLs with path parameters. Thus,
the preceding login_info() service should be declared first before login_with_token().


Python collection types cannot specify the type of objects to store unless we apply the generic
type hints for Python collections. The following delete_users() and update_profile_
names() APIs use generic type hints, List and Dict, in declaring query parameters that are
container types with type checking and data validation:


Setting default values to parameters will allow the execution of an API method
with or without supplying the parameter values. Depending on the requirement, assigned default values
are usually 0 for numeric types, False for bool types, empty string for string types, an empty list
([]) for List types, and an empty dictionary ({}) for Dict types.

With mixed
parameter types, all required parameters should be declared first, followed by default parameters, and
last in the parameter list should be the optional types. Disregarding this ordering rule will generate
a compiler error.

To access a request header, import first the Header function from the fastapi module. Then, declare
the variable that has the same name as the header in the method service as str types and initialize
the variable by calling the Header(None) function. The None argument enables the Header()
function to declare the variable optionally, which is a best practice.